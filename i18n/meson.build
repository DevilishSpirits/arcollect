# List of translation modules and their translations
# Translatiobs are stored in i18n/l10n-<lang>_<COUNTRY>/<module>.cpp
l10n_cpp_translations = {
	'common': [
		'fr',
	]
}

i18n_incs = include_directories('.')
i18n_deps = {}
# Process l10n_cpp_translations and generate the hpp files and dependencies
foreach module, locales: l10n_cpp_translations
	language_switch_bodies = {}
	locales_apply_declarations = 'void apply_C(void) noexcept;\n\t\t\t'
	cpp_files = ['l10n-C/'+module+'.cpp']
	translations = []
	# Inspect locales
	foreach locale: locales
		lang = locale[0]+locale[1]
		# Handle language_switch
		language_switch = language_switch_bodies.get(lang,'')
		if locale == lang
			language_case = 'default'
		else
			country = locale[3]+locale[4]
			language_case = 'case Code("'+country+'")'
		endif
		language_switch_bodies += {lang: language_switch + '\n\t\t\t'+language_case+': apply_'+locale+'(); break;'}
		locales_apply_declarations += 'void apply_'+locale+'(void) noexcept;\n\t\t\t'
		cpp_files += 'l10n-'+locale+'/'+module+'.cpp'
	endforeach
	# Generate language_switch_body
	language_switch_body = ''
	foreach lang_code, body: language_switch_bodies
		language_switch_body += '\tcase Code("'+lang_code+'"): switch(country) {'
		language_switch_body += body
		language_switch_body += '\n\t\t} break;'
	endforeach
	# Output files
	conf = configuration_data()
	conf.set('module',module)
	conf.set('locales_apply_declarations',locales_apply_declarations)
	conf.set('language_switch_body',language_switch_body)
	conf.set('translations_length',locales.length())
	conf.set('translations_content','Lang("'+'"),Lang("'.join(locales)+'")')
	
	configure_file(input: 'arcollect-i18n-struct-autogenerated.hpp', output: 'arcollect-i18n-'+module+'-struct-autogenerated.hpp', configuration: conf)
	cpp_files += configure_file(input: 'module-template.cpp', output: 'l10n-'+module+'.cpp', configuration: conf)
	i18n_deps += { module: declare_dependency(
		link_with: static_library('l10n-'+module, cpp_files),
		include_directories: i18n_incs
	)}
endforeach
