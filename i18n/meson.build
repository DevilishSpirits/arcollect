# List of translation modules and their translations
i18n_configuration = {
	# Example configuration for the 'common' module
	'common': {
		'locales': [
			# List existing translations here
			'fr',
		],
		'extra_deps': [
			# Additional Meson dependency object needed to build the module
		],
		# Weather there is custom C++ code
		# 0: A default 'arcollect-i18n-<module>.hpp' is generated
		# 1: you must provide a 'arcollect-i18n-<module>.hpp' and write
		# 'i18n/l10n-<lang>_<COUNTRY>/<module>.cpp'
		# 2: like 1 but no 'i18n/l10n-<lang>_<COUNTRY>/<module>.cpp' file is
		#    included. You have to provide these implementations in 'c++_files'
		'has_c++': 0,
		#'c++_files': optionnal list of extra C++ files to add
		#    	are not added and the list of files is built instead
		# Weather there is PO files in 'l10n-<locale>/<module>.po'
		'has_po': true,
	},
	# End of the common module
	'webextension': {
		'locales': [
			'fr',
		],
		'extra_deps': [
		],
		'has_c++': 0,
		'has_po': true,
	},
}
if enable_native_progs
	i18n_configuration += {
		'desktop_app': {
			'locales': [
				'fr',
			],
			'extra_deps': [
				# We depend on the GUI font system
				dep_freetype,
				dep_harfbuzz,
				dep_sdl2,
			],
			'has_c++': 1,
			'has_po': true,
		}
	}
endif

i18n_incs = include_directories('.')
i18n_deps = {}
polib_env = environment()
if not get_option('use_system_polib')
	polib_env.append('PYTHONPATH',subproject('polib').get_variable('polib_path'))
endif
# Process i18n_configuration and generate the hpp files and dependencies
po_hpp_gen = find_program('po-hpp-gen.py', native: true)
po_cpp_gen = find_program('po-cpp-gen.py', native: true)
foreach module, config: i18n_configuration
	a_i18n_module = 'arcollect-i18n-'+module
	locales = config['locales']
	language_switch_bodies = {}
	
	# Locale apply declarations prefixes
	locales_apply_declarations_prefixes = []
	extra_fields = []
	if config['has_c++'] > 0
		locales_apply_declarations_prefixes += ['apply_']
	endif
	if config['has_po']
		locales_apply_declarations_prefixes += ['po_apply_']
		extra_fields += ['#include "arcollect-i18n-'+module+'-po-entries-autogenerated.hpp"']
	endif
	locales_apply_declarations = []
	foreach prefix: locales_apply_declarations_prefixes
		locales_apply_declarations += [prefix+'C']
	endforeach
	
	hpp_files = []
	cpp_files = []
	translations = []
	# Inspect locales
	foreach locale: locales
		lang = locale[0]+locale[1]
		# Handle language_switch
		language_switch = language_switch_bodies.get(lang,'')
		if locale == lang
			language_case = 'default'
		else
			country = locale[3]+locale[4]
			language_case = 'case Code("'+country+'")'
		endif
		language_switch_function_call_end = locale+'(); '
		language_switch_bodies += {
			lang: language_switch + '\n\t\t\t'+language_case+': '+language_switch_function_call_end.join(locales_apply_declarations_prefixes)+language_switch_function_call_end+'break;'
		}
		foreach prefix: locales_apply_declarations_prefixes
			locales_apply_declarations += [prefix+locale]
		endforeach
		if config['has_po']
			cpp_files += custom_target('i18n-'+module+'-apply_'+locale+'-po-cpp', input: 'l10n-'+locale+'/'+module+'.po', output: a_i18n_module+'-apply_'+locale+'.cpp', command: [po_cpp_gen,module,locale,'msgstr','@INPUT@','@OUTPUT@'], env: polib_env)
		endif
	endforeach
	# Generate language_switch_body
	language_switch_body = ''
	foreach lang_code, body: language_switch_bodies
		language_switch_body += '\tcase Code("'+lang_code+'"): switch(country) {'
		language_switch_body += body
		language_switch_body += '\n\t\t} break;'
	endforeach
	# Output files
	conf = configuration_data()
	conf.set('module',module)
	conf.set('locales_apply_declarations','void '+'(void) noexcept;\n\t\t\tvoid '.join(locales_apply_declarations)+'(void) noexcept;\n\t\t\t')
	conf.set('extra_fields','\n\t\t\t'.join(extra_fields))
	conf.set('apply_C_language','C();'.join(locales_apply_declarations_prefixes)+'C();')
	conf.set('language_switch_body',language_switch_body)
	conf.set('translations_length',locales.length())
	conf.set('translations_content','Lang("'+'"),Lang("'.join(locales)+'")')
	
	configure_file(input: 'arcollect-i18n-struct-autogenerated.hpp', output: a_i18n_module+'-struct-autogenerated.hpp', configuration: conf)
	# The 'arcollect-i18n-<module>.hpp' C++ code
	if config['has_c++'] > 0
		hpp_files += 'arcollect-i18n-'+module+'.hpp'
	else
		cpp_files += configure_file(input: 'template-arcollect-i18n-module.hpp', output: 'arcollect-i18n-'+module+'.hpp', configuration: conf)
	endif
	if config['has_c++'] == 1
		cpp_files += 'l10n-C/'+module+'.cpp'
		foreach locale: locales
			cpp_files += 'l10n-'+locale+'/'+module+'.cpp'
		endforeach
	endif
	if 'c++_files' in config
		cpp_files += config['c++_files']
	endif
	
	# Handling PO files
	if config['has_po']
		hpp_files += custom_target('i18n-'+module+'-po-hpp', input: 'l10n-C/'+module+'.po', output: a_i18n_module+'-po-entries-autogenerated.hpp', command: [po_hpp_gen,module,'@INPUT@','@OUTPUT@'], env: polib_env)
		cpp_files += custom_target('i18n-'+module+'-apply_C-po-cpp', input: 'l10n-C/'+module+'.po', output: a_i18n_module+'-apply_C.cpp', command: [po_cpp_gen,module,'C','msgid','@INPUT@','@OUTPUT@'], env: polib_env)
	endif
	
	cpp_files += hpp_files
	cpp_files += configure_file(input: 'module-template.cpp', output: 'l10n-'+module+'.cpp', configuration: conf)
	
	i18n_deps += { module: declare_dependency(
		link_with: static_library('l10n-'+module, cpp_files, dependencies: config['extra_deps'], include_directories: i18n_incs, build_by_default: false),
		sources: hpp_files, # For correct dependency graph
		include_directories: i18n_incs
	)}
endforeach
