name: CI build

on:
  push:
    branches: [ master-staging, gh-action-test ]

  workflow_dispatch:
  
  workflow_call:

jobs:
  build-archlinux-x86_64:
    name: ArchLinux (x86_64)
    runs-on: [archlinux]
    steps:
      - name: Checkout repository
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c
      - name: Generate PKGBUILD
        run: sh generate-PKGBUILD.sh local > ../PKGBUILD
        working-directory: packaging
      - name: Invoke makepkg
        run: makepkg
      - name: Uploading ArchLinux package
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce
        with:
          name: archlinux-x86_64-package
          path: arcollect-*.pkg.tar.*
  build-wrapped:
    name: ArchLinux (with wraps on)
    runs-on: [archlinux]
    steps:
      - name: Checkout repository
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c
      - name: Configure project
        run: arch-meson build --wrap-mode default --force-fallback-for libcurl,sdl2,freetype2,harfbuzz,sqlite3,INIReader,libjpeg,libpng,libtiff-4,zlib
      - name: Build project
        run: meson compile -C build
      - name: Test project
        run: meson test -C build --print-errorlogs
      - name: Install project
        run: meson install -C build
        env:
          DESTDIR: "archive-out"
      - name: Archiving the "installed project"
        run: tar -cf archive-out.tar -C build archive-out --transform 's/archive-out//g'
      - name: Uploading DESTDIR artifact
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce
        with:
          name: build-wrapped_DESTDIR.tar
          path: archive-out.tar
      - name: Uploading arcollect-webextension.zip artifact
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce
        with:
          name: build-wrapped_webextension.zip
          path: build/webextension/arcollect.zip
  build-clang:
    name: ArchLinux (Clang)
    runs-on: [archlinux]
    env:
      CC: clang
      CXX: clang++
    steps:
      - name: Checkout repository
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c
      - name: Configure project
        run: arch-meson build -Duse_system_polib=true
      - name: Build project
        run: meson compile -C build
      - name: Test project
        run: meson test -C build --print-errorlogs
      - name: Install project
        run: meson install -C build
        env:
          DESTDIR: "archive-out"
      - name: Archiving the "installed project"
        run: tar -cf archive-out.tar -C build archive-out --transform 's/archive-out//g'
      - name: Uploading DESTDIR artifact
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce
        with:
          name: build-clang_DESTDIR.tar
          path: archive-out.tar
      - name: Uploading arcollect-webextension.zip artifact
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce
        with:
          name: build-clang_webextension.zip
          path: build/webextension/arcollect.zip
  build-ubuntu-22_04-amd64:
    name: Ubuntu 22.04 (amd64)
    runs-on: [ubuntu-22.04]
    steps:
      - name: Checkout repository
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c
      - name: Update apt cache
        run: sudo apt update
      - name: Install dependencies and tools
        run: sudo apt install meson libsdl2-dev libfreetype-dev libfontconfig-dev libharfbuzz-dev libopenimageio-dev libboost-all-dev libcurl4-openssl-dev libdbus-1-dev liblcms2-dev lintian libbrotli-dev
      - name: Setup project
        run: meson build --prefix=/usr -Dstrip=true -Dcpp_link_args='-z now' -Dbuildtype=release -Db_lto=true
      - name: Build project
        run: ninja -C build
      - name: Uploading arcollect-webextension.zip artifact
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce
        with:
          name: build-ubuntu-22_04_webextension.zip
          path: build/webextension/arcollect.zip
      - name: Generate Debian package
        run: ninja -C build "packaging/$(grep -oEm 1 "arcollect_[0-9\.]+-1_$(echo -n "$(dpkg-architecture -q DEB_HOST_ARCH)").deb" build/build.ninja)"
        shell: bash
      - name: Uploading Debian package artifact
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce
        with:
          name: ubuntu-22_04-amd64-package
          path: build/packaging
      - name: Test project
        run: ninja -C build test
      - name: Link Debian package
        run: ln "build/packaging/$(grep -oEm 1 "arcollect_[0-9\.]+-1_$(echo -n "$(dpkg-architecture -q DEB_HOST_ARCH)").deb" build/build.ninja)" arcollect.deb
        shell: bash
      - name: Lintian Debian package
        run: lintian --no-tag-display-limit --dont-check-part debian/changelog,debian/copyright -I -E --verbose -- arcollect.deb
      - name: Install Debian package
        run: sudo dpkg -i arcollect.deb
        shell: bash
      - name: Upload build dir
        if: always()
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce
        with:
          name: ubuntu-22_04-amd64-builddir
          path: build
  build-ubuntu-20_04-amd64:
    name: Ubuntu 20.04 (amd64)
    runs-on: [ubuntu-20.04]
    env:
      CC: gcc-10
      CXX: g++-10
    steps:
      - name: Checkout repository
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c
      - name: Update apt cache
        run: sudo apt update
      - name: Install dependencies and tools
        run: sudo apt install ninja-build gcc-10 g++-10 libsdl2-dev libfreetype-dev libfontconfig-dev libharfbuzz-dev libopenimageio-dev libboost-all-dev libdbus-1-dev liblcms2-dev lintian libbrotli-dev
      - name: Install Meson
        uses: ./.github/actions/install-meson
      - name: Setup project
        run: meson build --prefix=/usr -Dstrip=true -Dcpp_link_args='-z now' -Dbuildtype=release -Db_lto=true
      - name: Build project
        run: ninja -C build
      - name: Uploading arcollect-webextension.zip artifact
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce
        with:
          name: build-ubuntu-20_04_webextension.zip
          path: build/webextension/arcollect.zip
      - name: Generate Debian package
        run: ninja -C build "packaging/$(grep -oEm 1 "arcollect_[0-9\.]+-1_$(echo -n "$(dpkg-architecture -q DEB_HOST_ARCH)").deb" build/build.ninja)"
        shell: bash
      - name: Uploading Debian package artifact
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce
        with:
          name: ubuntu-20_04-amd64-package
          path: build/packaging
      - name: Test project
        run: ninja -C build test
      - name: Link Debian package
        run: ln "build/packaging/$(grep -oEm 1 "arcollect_[0-9\.]+-1_$(echo -n "$(dpkg-architecture -q DEB_HOST_ARCH)").deb" build/build.ninja)" arcollect.deb
        shell: bash
      - name: Lintian Debian package
        run: lintian --no-tag-display-limit --dont-check-part debian/changelog,debian/copyright -I -E --verbose -- arcollect.deb
        continue-on-error: true # TODO Find a way to silent the fact that we embed curl
      - name: Install Debian package
        run: sudo dpkg -i arcollect.deb
        shell: bash
      - name: Upload build dir
        if: always()
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce
        with:
          name: ubuntu-20_04-amd64-builddir
          path: build
  build-windows-2019-x64:
    name: Windows 2019 (x64)
    runs-on: [windows-2019]
    env:
      PATH: C:\Program Files\PowerShell\7;C:\Users\runneradmin\.dotnet\tools;C:\aliyun-cli;C:\vcpkg;C:\cf-cli;C:\tools\zstd;C:\hostedtoolcache\windows\stack\2.7.1\x64;C:\tools\ghc-9.0.1\bin;C:\Program Files\dotnet;C:\SeleniumWebDrivers\GeckoDriver;C:\Program Files (x86)\sbt\bin;C:\Program Files\Git\bin;C:\Program Files (x86)\pipx_bin;C:\hostedtoolcache\windows\Python\3.7.9\x64\Scripts;C:\hostedtoolcache\windows\Python\3.7.9\x64;C:\npm\prefix;C:\ProgramData\kind;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files\Microsoft\Web Platform Installer\;C:\Program Files\PowerShell\7\;C:\Program Files\dotnet\;C:\Program Files (x86)\Windows Kits\10\Windows Performance Toolkit\;C:\Program Files\nodejs\;C:\Program Files\Microsoft Service Fabric\bin\Fabric\Fabric.Code;C:\Program Files\Microsoft SDKs\Service Fabric\Tools\ServiceFabricLocalClusterManager;C:\Program Files\OpenSSL\bin;C:\Program Files\Git\cmd;C:\Program Files\Git\mingw64\bin;C:\Program Files\Git\usr\bin;C:\Program Files (x86)\sbt\bin;C:\SeleniumWebDrivers\ChromeDriver\;C:\SeleniumWebDrivers\EdgeDriver\;C:\Program Files\CMake\bin;C:\Users\runneradmin\AppData\Local\Microsoft\WindowsApps;C:\msys64\usr\bin;C:\msys64\mingw64\bin # Remove unused tools, Chocolatey and Strawberry largely outdated GCC from the PATH and use MSYS2 instead
    steps:
      - name: Checkout repository
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c
      - name: Install Meson
        run: pip install meson ninja
      - name: Install WiX
        run: dotnet tool install --global wix --version 4.0.0
      - name: Install WiX extensions
        run: wix extension add -g WixToolset.UI.wixext/4.0.0
      - name: Configure project
        run: meson build --force-fallback-for=freetype2,fmt,bzip2,giflib,libpng,Imath,inih,lcms2,libcurl,libjpeg,libtiff,OpenImageIO,robin-map,roboto,sdl2,harfbuzz,sqlite3,boost,zlib -Denable_webextension=false -Dcpp_link_args=-static -Dc_link_args=-static -Dbuildtype=release -Dstrip=true # FIXME LTO doesn't works, why?
      - name: Build desktop-app
        run: ninja -C build desktop-app/libdesktop-app-staticlib.a
      - name: Build webext-adder
        run: ninja -C build webext-adder/libarcollect-webext-adder.a
      - name: Build project
        run: ninja -C build
      - name: Generate MSI
        run: ninja -C build all-msi
      - name: Rename MSI
        run: Get-ChildItem | Where {$_.Name -Match '.msi$'} | Rename-Item -NewName {$_.name -replace '.msi','-${{ github.ref_name }}-x64.msi' } 
        shell: pwsh
        working-directory: build/packaging
      - name: Upload MSI artifact
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce
        with:
          name: windows-2019-x64-package
          path: build/packaging/*.msi
      - name: Test project
        run: ninja -C build test
      - name: Install MSI
        run: msiexec /i /q build/packaging/arcollect.msi
      - name: Upload build dir
        if: always()
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce
        with:
          name: windows-2019-builddir
          path: build
  build-flatpak:
    name: Flatpak
    runs-on: [ubuntu-22.04]
    env:
      GH_FLATPAK_WORKSPACE: /tmp/flatpak-workspace
    steps:
      - name: Checkout repository
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c
      - name: Update apt cache
        run: sudo apt update
      - name: Install Flatpak and Meson
        run: sudo apt install flatpak-builder meson
      - name: Add the Flathub repo
        run: sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
      - name: Install Flatpak runtime and SDK
        run: XDG_VER="$(grep -F 'ARCOLLECT_FLATPAK_XDG_RUNTIME_VERSION' config.txt | cut -f 2 -d':')" && sudo flatpak install -y flathub "org.freedesktop.Platform//$XDG_VER" "org.freedesktop.Sdk//$XDG_VER" # Dynamically read the required version
      - name: Make Flatpak work directory	
        run: mkdir "$GH_FLATPAK_WORKSPACE" "$GH_FLATPAK_WORKSPACE/build-dir"
      - name: Generate the Flatpak manifest
        run: sh generate-flatpak.sh local > "$GH_FLATPAK_WORKSPACE/manifest.yml"
        working-directory: packaging
      - name: Predownload wraps
        run: meson subprojects download
        continue-on-error: true # Meson yell on CMake subprojects
      - name: Build the Flatpak
        run: flatpak-builder "$GH_FLATPAK_WORKSPACE/build-dir" "$GH_FLATPAK_WORKSPACE/manifest.yml"
      - name: Cleanup Flatpak workspace
        if: always()
        run: rm -rf "$GH_FLATPAK_WORKSPACE/.flatpak-builder/cache" "$GH_FLATPAK_WORKSPACE/.flatpak-builder/ccache" "$GH_FLATPAK_WORKSPACE/build-dir/var"
      - name: Upload Flatpak workspace
        if: always()
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce
        with:
          name: flatpak-workspace
          path: ${{ env.GH_FLATPAK_WORKSPACE }}
  check-webextensions-same:
    needs: [build-wrapped, build-clang, build-ubuntu-22_04-amd64, build-ubuntu-20_04-amd64]
    runs-on: [ubuntu-latest]
    steps:
      - name: Download build-wrapped_webextension.zip
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: build-wrapped_webextension.zip
          path: build-wrapped_webextension
      - name: Download build-clang_webextension.zip
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: build-clang_webextension.zip
          path: build-clang_webextension
      - name: Download build-ubuntu-22_04_webextension.zip
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: build-ubuntu-22_04_webextension.zip
          path: build-ubuntu-22_04_webextension
      - name: Download build-ubuntu-20_04_webextension.zip
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: build-ubuntu-20_04_webextension.zip
          path: build-ubuntu-20_04_webextension
      - name: Make unpack dirs
        run: mkdir build-wrapped build-clang build-ubuntu-22_04 build-ubuntu-20_04
      - name: Unpack build-wrapped_webextension.zip
        run: unzip ../build-wrapped_webextension/arcollect.zip
        working-directory: build-wrapped
      - name: Unpack build-clang_webextension.zip
        run: unzip ../build-clang_webextension/arcollect.zip
        working-directory: build-clang
      - name: Unpack build-ubuntu-22_04_webextension.zip
        run: unzip ../build-ubuntu-22_04_webextension/arcollect.zip
        working-directory: build-ubuntu-22_04
      - name: Unpack build-ubuntu-20_04_webextension.zip
        run: unzip ../build-ubuntu-20_04_webextension/arcollect.zip
        working-directory: build-ubuntu-20_04
      - name: Compare build-wrapped and build-clang results
        run: diff -ry build-wrapped build-clang
      - name: Compare build-wrapped and build-ubuntu-22_04 results
        run: diff -ry build-wrapped build-ubuntu-22_04
      - name: Compare build-wrapped and build-ubuntu-20_04 results
        run: diff -ry build-wrapped build-ubuntu-20_04
  merge-to-master:
    name: Merge 'master-staging' to 'master'
    needs: [build-archlinux-x86_64, build-wrapped, build-ubuntu-22_04-amd64, build-ubuntu-20_04-amd64, build-windows-2019-x64, build-flatpak, check-webextensions-same]
    runs-on: [ubuntu-latest]
    if: ${{ (github.event_name == 'push') && (github.ref == 'refs/heads/master-staging') }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c
        with:
          fetch-depth: 0
      - name: Checkout to master branch
        run: git checkout master
      - name: Merge master-staging in master
        run: git merge master-staging --ff-only
      - name: Push
        run: git push -u origin master

